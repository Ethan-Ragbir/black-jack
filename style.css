const suits = ['♠', '♥', '♦', '♣'];
const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
let deck = [], playerHand = [], dealerHand = [], bankroll = 1000, currentBet = 0;

const dealerCardsDiv = document.getElementById('dealer-cards');
const playerCardsDiv = document.getElementById('player-cards');
const dealerScoreSpan = document.getElementById('dealer-score');
const playerScoreSpan = document.getElementById('player-score');
const bankrollSpan = document.getElementById('bankroll');
const resultDiv = document.getElementById('result');
const hitBtn = document.getElementById('hit');
const standBtn = document.getElementById('stand');
const restartBtn = document.getElementById('restart');
const placeBetBtn = document.getElementById('place-bet');
const betInput = document.getElementById('bet');
const gameArea = document.getElementById('game-area');

function buildDeck() {
  deck = [];
  for (let suit of suits) {
    for (let value of values) {
      deck.push({ suit, value });
    }
  }
  for (let i = deck.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [deck[i], deck[j]] = [deck[j], deck[i]];
  }
}

function dealCard(hidden = false) {
  const card = deck.pop();
  const div = document.createElement('div');
  div.className = 'card';
  if (card.suit === '♥' || card.suit === '♦') div.classList.add('red');
  if (hidden) div.classList.add('back');
  div.innerHTML = hidden ? '' : `<div>${card.value}</div><div>${card.suit}</div>`;
  return { card, div };
}

function getCardValue(value) {
  if (value === 'A') return 11;
  if (['K', 'Q', 'J'].includes(value)) return 10;
  return parseInt(value);
}

function calculateScore(hand) {
  let score = 0, aces = 0;
  for (let c of hand) {
    score += getCardValue(c.value);
    if (c.value === 'A') aces++;
  }
  while (score > 21 && aces) {
    score -= 10;
    aces--;
  }
  return score;
}

function updateScores(revealDealer = false) {
  playerScoreSpan.textContent = calculateScore(playerHand);
  if (revealDealer) {
    dealerScoreSpan.textContent = calculateScore(dealerHand);
    [...dealerCardsDiv.children].forEach((el, i) => el.classList.remove('back'));
    [...dealerCardsDiv.children].forEach((el, i) => {
      el.innerHTML = `<div>${dealerHand[i].value}</div><div>${dealerHand[i].suit}</div>`;
    });
  }
}

function endGame(msg) {
  hitBtn.disabled = standBtn.disabled = true;
  resultDiv.textContent = msg;
  updateScores(true);
  restartBtn.disabled = false;
}

placeBetBtn.onclick = () => {
  currentBet = parseInt(betInput.value);
  if (currentBet > bankroll || currentBet <= 0) return alert('Invalid bet amount.');

  bankroll -= currentBet;
  bankrollSpan.textContent = bankroll;

  buildDeck();
  playerHand = [];
  dealerHand = [];
  dealerCardsDiv.innerHTML = '';
  playerCardsDiv.innerHTML = '';
  resultDiv.textContent = '';

  const card1 = dealCard();
  const card2 = dealCard();
  playerHand.push(card1.card, card2.card);
  playerCardsDiv.append(card1.div, card2.div);

  const dealerCard1 = dealCard();
  const dealerCard2 = dealCard(true);
  dealerHand.push(dealerCard1.card, dealerCard2.card);
  dealerCardsDiv.append(dealerCard1.div, dealerCard2.div);

  gameArea.classList.remove('hidden');
  updateScores();

  hitBtn.disabled = false;
  standBtn.disabled = false;
  restartBtn.disabled = true;
}

hitBtn.onclick = () => {
  const newCard = dealCard();
  playerHand.push(newCard.card);
  playerCardsDiv.appendChild(newCard.div);
  updateScores();
  if (calculateScore(playerHand) > 21) {
    endGame('You busted! Dealer wins.');
  }
}

standBtn.onclick = () => {
  while (calculateScore(dealerHand) < 17) {
    const next = dealCard();
    dealerHand.push(next.card);
    dealerCardsDiv.appendChild(next.div);
  }

  const playerScore = calculateScore(playerHand);
  const dealerScore = calculateScore(dealerHand);
  let msg = '';
  if (dealerScore > 21 || playerScore > dealerScore) {
    bankroll += currentBet * 2;
    msg = 'You win!';
  } else if (playerScore < dealerScore) {
    msg = 'Dealer wins!';
  } else {
    bankroll += currentBet;
    msg = 'Push (tie).';
  }
  bankrollSpan.textContent = bankroll;
  endGame(msg);
}

restartBtn.onclick = () => {
  gameArea.classList.add('hidden');
  resultDiv.textContent = '';
  hitBtn.disabled = standBtn.disabled = true;
  restartBtn.disabled = false;
}
